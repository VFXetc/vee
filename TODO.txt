
BEFORE FIRST DEPLOY
-------------------

- try to unify the arguments and attributes on Package and Requirement
- dev environment
- test everything?!
- key_base
    - entrypoints
    - apps: can we build them in a central location, outside of the isolated
      build environments, or is the Finder going to be able to adapt to symlinks
      in the Dock?
    - scrap history
- OS X apps via symlinks in docks?
- assert all westernx packages transition


    - entrypoints.yml at top_level is built by Makefile (in sgfs and others)
        - make a build_metatools_entrypoints distutils command
    - sgactions.yml at top_level is built by Makefile (in sgfs and others)
        - this becomes the user's problem


ALL COMMANDS
------------

√ vee init
√ vee config
√ vee doctor
√ vee self-update
- vee gc [--installs] [--environs]

√ vee install REQUIREMENT [ARGS]
- vee uninstall (NAME|REQUIREMENT [ARGS])
√ vee brew

√ vee link ENVIRON (NAME|REQUIREMENT [ARGS])
- vee unlink ENVIRON (NAME|REQUIREMENT [ARGS])
~ vee prefix
√ vee exec [--export] [-e ENVIRON]+ [-r REQUIREMENTS]+ [NAME=VALUE]+ COMMAND [...]

~ vee repo
~ vee git
~ vee update [--all] [ENVIRON]
~ vee upgrade [--all] [ENVIRON]

- vee develop (NAME|REQUIREMENT)
- dev [...] COMMAND [ARGS]

- vee add [NAME|PATH]
- vee status
- vee commit [--major,--minor,--patch] [-m MESSAGE]
- vee push


WORKFLOWS
---------

Primary consumer:

    export VEE=/usr/local/vee
    export VEE_REPO=westernx

    vee init git@git.westernx:westernx/vee-repo
    vee update
    vee upgrade

    .bashrc:
        eval "$(vee exec --export)"


Developer, version 1:

    # Same as above, and then:

    export VEE_DEV=~/dev:~/key_tools

    vee develop TOOL
    # create .vee-dev-env within the tools directory

    cd TOOL
    # develop here; use `dev` to run in the dev environment
    git commit -am 'What you did to this tools.'
    git push # may not be nessesary

    vee add [--all|TOOL_NAME|TOOL_PATH]
    vee commit [--major,--minor,--patch] [-m MESSAGE]
    vee push # Makes sure the tool is also pushed.

    vee commit -a
    vee push

    vee update --upgrade


---

- @path/to/requirements for sets?

- parenting and cloning and garbage is something that can be added on later, if
  we realy want

- VEE_DEV=$VEE/dev by default, but is only really used by `vee develop` and `dev -u USER`
- VEE_REPO=westernx sets the default repo

- change `vee repo --add` to `vee repo --set`

- do we need to track the git remote, or can we always just assume that it is
  "origin"? We do want to know what branch to track.

- detect all Python variants, and have special builders for them

- permissions

    - install_vee.py
        - just warn if they are running as root, but don't stop them
        - default to assuming a single user
        - --multi-user signals that it should try to setup a group setup, OR we
          can just let them figure that out themselves

    - `vee doctor` should do the main permission checks

    - do we need to set our umask, or can permission bits somehow handle that?
        - document the result
    - do we need to chgrp, or can setgid handle that?
        - document the result

- build/install classes: Base, Make, Python, PythonEgg, PythonWheel, etc..
    - this have methods for handling build, install, develop, and runtime
    - may use different classes for each of the above stages.
    - package.set_handlers(build=True, install=True); package.builder.build()
    - pkgname.tgz --builder python_source

- should $repo/requirements.txt be moved to $repo/vee[/-]requirements.txt ?

- test python packages (for each of source, sdist, bdist, bdist_wheel):
    - they import
    - they import each other
    - console_scripts entrypoints work
    - scripts work
    - their install_requires doesn't matter

- install data that comes with Python wheels
  $NAME-$VERSION.data dir at top-level, beside $NAME-$VERSION.dist-info

- install Python commands listed in egg-info

- linking should check if a previous revision of the same thing was already
  linked into an environment, and stop you

- parse_multiple_requirements(args) walks through a set of args, pulling out
  RequirementSet(s) when they are files that end in '.txt' (or no extendion),
  and requirements from the rest

- how does this new Python install method deal with install_requires?
    - it doesn't! document it?

- s/Home/Vee/g ??

- does it make sense to have packages/builds/installs in the database, instead
  of having them all together?

- build-subdir and install-prefix should be used to invalidate matches in the
  resolver

- does sitetools disprove the separate Python build/install process?

- git might need to use different revisions on different platforms (for homebrew/linuxbrew)
    - if this is the only attribute that matters in this way, then we can have a
        --linux-revision and --osx-revision which it picks from
    - `--revision:osx` or `osx:--revision`

- '--refresh' or --latest' or '--head' to always request the latest; this is a more general
  case of --force-fetch

- render_in_environ(list_or_dict, environ)
  - process the configuration this way too

- log everything about the different steps, and stuff it into the database
- CLI IO/API/logging package

    - name:
        x clio (on PyPI)
        - clout

    - styles (copied straight from what we have is cool)
    - io indenting model
        - replaces sys.stdout and sys.stderr, and those are pushed through
        - can spawn reader threads which can (1) buffer the output, (2) echo it, (3) push it to a callback
        - with clout.io.indent(), or clout.io.push_indent() and clout.io.pop_indent()
    - event log
        - format: "$datetime $stream $string-escaped-content"
        - events:
            - exec:$pid -> nth executable
            - arg:$pid:I -> argument I of nth exe
            - out:$pid -> stdout of nth exe
            - err:$pid -> stderr of nth exe

- Home.{package,build,install,develop,environment}_root attributes
- Home.to_environ()

- `vee gc`
  - delete installs (and their DB records) which are not linked to
  - delete installs in DB that don't exist on disk
  - delete anything on disk that isn't referred to by the index
      build a set of relative paths (and all their ancestors), then walk the
      root looking for directories which aren't mentioned, then delete them

- record stdout/stderr from build process in the database. Use a timestamped
  format: each line starts with "out" or "err" and the timestamp

    out 2015-02-18T15:02:01 sdflkjsdf

- Http/File/Base could do checksums of files to see if they have changed
  - memoize the caches based on inode,size,mtime

- cythonmagick is pulling in the "wrong" sqlite?

- wxfab fabric package for deploying and debugging these things

- `vee list` lists environments
- `vee list ENVIRONMENT` lists the various buildtimes of environments

- dev

    - Builder class encapsulates the base building logic; can be overridden for
      DevBuilder (so that python can `python setup.py develop` instead)

    - DevManager proxies to the "normal" manager to fetch a package into the
      dev location, and in the case of Python packages build the egg-info so it
      knows how to link the environment.

    - `dev` then just discovers your dev environment, and merges its envvars
      on top of the master one.

    - sitetools is installed in the master one, and the tools which set envvars
      also setup KS_SITES (or a renamed versions). However, we won't really
      need KS_SITES since we are installing everything without .pth files.

    - !! How can we have a tool auto-update an environment.txt with the current
      git commits?

        - Scan your dev directory, looking for git repos with remotes that match
          the repos in the env.txt
        - See if the current commit differs from that which would be installed
          by the env.txt

    - use the standard managers for fetching/installing repos

    - `vee init git@git.westernx:westernx/veerepo /usr/local/vee`
    - `vee init --inherit-from /usr/local/vee ~/dev/vee-env`

        - the git repo it clones is the same that the indicated uses
        - the runtime will link against the master
        - a $VEE/config file (YAML) contains this sort of info:

          repo_requirement: git+git@git.westernx:westernx/veerepo --force-fetch --revision origin/master
          repo_install_path: /home/mboers/dev/vee-env/installs/veerepo/1.0.0
          parent_path: /usr/local/vee

    - `vee add [--major,--minor,--patch] .` add changes to the current package (likely a git repo) to the
      repo's environment file. The change-level flags increment the "version" flag, if set

    - `vee commit [-a] [--major|--minor|--patch] [-m MESSAGE]`] 
    - `vee push`




LATER
-----

- custom managers
  - e.g. `vee install PyAV.py`, where PyAV.py contains:
        - REQUIREMENT = 'https://pypi.python.org/packages/source/a/av/av-0.2.2.tar.gz#md5=ec0198f28d9294d20b54b0ac3a9ff77d'
        - DEPENDS_ON = ['lib:ffmpeg']
        - MANAGER or PyAVManager or PyavManager, which inherits from BaseManager

- pypi manager
    - PyPI JSON API -> https://pypi.python.org/pypi/%s/json
    - Need to either hit the PyPI on every `.installed` check, or cache versions.

- match how Homebrew links directories, or at least be smarter about it

- homebrew taps: homebrew+mikeboers/testbrew/foo
    - we would need a way to detect which tap it is
    - we can grep `brew info $forumla` for From: https://github.com/#{user}/#{repo}/blob/master/#{path}

- Requirement.dependencies() and Requirement.provisions()

  An AbstractRequirement is one like "lib:ffmpeg", "py:yaml", etc., that just
  know what result they want, but not where it is from. A DependencyInterface
  could be the intersection of AbstractRequirement and Requirement, such that

  Requirement.dependencies() can return real ones (e.g. from `brew deps`)
  and abstract ones. It is permitted to return different dependencies on each
  call (as they are discovered, e.g.)

  DependencyResolver can take a pool of requirements and figure out what order
  they should be installed in (via C3)

        .add(requirement)
        .rescan_dependencies()
        .linearize()


  